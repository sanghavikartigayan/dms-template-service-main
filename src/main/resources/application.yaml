spring:
  application:
    name: dms-template-service
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  main:
    allow-circular-references: true
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DB_HOST:localhost:5432}/${DB_NAME:dms-template}?currentSchema=dmstemplate
    username: ${DB_USER_OWNER}
    password: ${DB_PWD_OWNER}
    hikari:
      maximum-pool-size: 20
  jpa:
    hibernate:
      ddl-auto: none
    database-platform: org.hibernate.dialect.PostgreSQL95Dialect
    properties:
      hibernate:
        flushMode: ALWAYS
        default_schema: dmstemplate
  liquibase:
    change-log: classpath:/db/main-changelog.groovy
  jackson:
    deserialization:
      USE_BIG_DECIMAL_FOR_FLOATS: true
      ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: true
      READ_UNKNOWN_ENUM_VALUES_AS_NULL: true
      FAIL_ON_UNKNOWN_PROPERTIES: false
  cloud:
    config:
      fail-fast: false
    gcp:
      datastore:
        enabled: false
    function:
      definition: dmsTemplateProjection;
    stream:
      bindings:
        dmsTemplateProjection-in-0:
          destination: gcp-${spring.profiles.active}-fmw-dms-template-inbound-events
          group: gcp-${spring.profiles.active}-fmw-dms-template-inbound-events-cg1
      kafka:
        bindings:
          dmsTemplateProjection-in-0:
            consumer:
              start-offset: earliest
              autoCommitOnError: true
        binder:
          brokers: ${KAFKA_HOST:}
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
          producer-properties:
            key.serializer: org.apache.kafka.common.serialization.StringSerializer


server:
  port: 8080

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus

donna:
  oauth2:
    resource-server:
      authProviders:
        - ${PING_ISSUER}
        - ${KC_ISSUER}
  auth:
    userInfoUrl: ${PING_OPENID_ENDPOINT}